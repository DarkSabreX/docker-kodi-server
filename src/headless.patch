commit 34a576e9e956006905535f6c275eb47d2949c5c2
Author: sylvain Gaspaillard <sylvain.gaspaillard@fr.clara.net>
Date:   Sat Nov 24 16:10:05 2018 +0100

    headless patch (18.0rc1)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 715c4e6..5d1c9e6 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -660,9 +660,6 @@ bool CApplication::CreateGUI()
   m_pGUI.reset(new CGUIComponent());
   m_pGUI->Init();
 
-  // Splash requires gui component!!
-  CServiceBroker::GetRenderSystem()->ShowSplash("");
-
   // The key mappings may already have been loaded by a peripheral
   CLog::Log(LOGINFO, "load keymapping");
   if (!CServiceBroker::GetInputManager().LoadKeymaps())
@@ -733,8 +730,6 @@ bool CApplication::Initialize()
   int iDots = 1;
   while (!event.WaitMSec(1000))
   {
-    if (databaseManager.IsUpgrading())
-      CServiceBroker::GetRenderSystem()->ShowSplash(std::string(iDots, ' ') + localizedStr + std::string(iDots, '.'));
 
     if (iDots == 3)
       iDots = 1;
@@ -773,14 +768,11 @@ bool CApplication::Initialize()
     iDots = 1;
     while (!event.WaitMSec(1000))
     {
-      if (isMigratingAddons)
-        CServiceBroker::GetRenderSystem()->ShowSplash(std::string(iDots, ' ') + localizedStr + std::string(iDots, '.'));
       if (iDots == 3)
         iDots = 1;
       else
         ++iDots;
     }
-    CServiceBroker::GetRenderSystem()->ShowSplash("");
     m_incompatibleAddons = incompatibleAddons;
     m_confirmSkinChange = true;
 
@@ -1122,10 +1114,9 @@ bool CApplication::OnSettingsSaving() const
   // don't save settings when we're busy stopping the application
   // a lot of screens try to save settings on deinit and deinit is
   // called for every screen when the application is stopping
-  if (m_bStop)
-    return false;
 
-  return true;
+  return false;
+
 }
 
 void CApplication::ReloadSkin(bool confirm/*=false*/)
@@ -2153,14 +2144,6 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
 #elif defined(TARGET_WINDOWS)
     CWIN32Util::XBMCShellExecute(pMsg->strParam.c_str(), (pMsg->param1 == 1));
 #endif
-    // Resume AE processing of XBMC native audio
-    if (audioengine)
-    {
-      if (!audioengine->Resume())
-      {
-        CLog::Log(LOGFATAL, "%s: Failed to restart AudioEngine after return from external player", __FUNCTION__);
-      }
-    }
     break;
 
   case TMSG_EXECUTE_SCRIPT:
@@ -2430,15 +2413,8 @@ bool CApplication::Cleanup()
     m_screensaverInhibitor.Release();
 
     CRenderSystemBase *renderSystem = CServiceBroker::GetRenderSystem();
-    if (renderSystem)
-      renderSystem->DestroyRenderSystem();
 
     CWinSystemBase *winSystem = CServiceBroker::GetWinSystem();
-    if (winSystem)
-      winSystem->DestroyWindow();
-
-    if (m_pGUI)
-      m_pGUI->GetWindowManager().DestroyWindows();
 
     CLog::Log(LOGNOTICE, "unload sections");
 
@@ -2977,22 +2953,10 @@ void CApplication::PlaybackCleanup()
     m_appPlayer.OpenNext(m_ServiceManager->GetPlayerCoreFactory());
   }
 
-  if (!m_appPlayer.IsPlayingVideo())
-  {
-    if(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO ||
-       CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_FULLSCREEN_GAME)
-    {
-      CServiceBroker::GetGUI()->GetWindowManager().PreviousWindow();
-    }
-    else
-    {
-      //  resets to res_desktop or look&feel resolution (including refreshrate)
-      CServiceBroker::GetWinSystem()->GetGfxContext().SetFullScreenVideo(false);
-    }
 #ifdef TARGET_DARWIN_IOS
     CDarwinUtils::SetScheduling(false);
 #endif
-  }
+
 
   if (!m_appPlayer.IsPlayingAudio() && CServiceBroker::GetPlaylistPlayer().GetCurrentPlaylist() == PLAYLIST_NONE && CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_VISUALISATION)
   {
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 30cf6e7..9caa821 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -309,6 +309,7 @@ public:
 
   bool PlatformDirectoriesEnabled() { return m_bPlatformDirectories; }
   bool IsStandAlone() { return m_bStandalone; }
+
   bool IsEnableTestMode() { return m_bTestMode; }
 
   bool IsAppFocused() const { return m_AppFocused; }
diff --git a/xbmc/platform/xbmc.cpp b/xbmc/platform/xbmc.cpp
index e9f3917..9021c16 100644
--- a/xbmc/platform/xbmc.cpp
+++ b/xbmc/platform/xbmc.cpp
@@ -44,13 +44,6 @@ extern "C" int XBMC_Run(bool renderGUI, const CAppParamParser &params)
   CXBMCApp::get()->Initialize();
 #endif
 
-  if (renderGUI && !g_application.CreateGUI())
-  {
-    CMessagePrinter::DisplayError("ERROR: Unable to create GUI. Exiting");
-    g_application.Stop(EXITCODE_QUIT);
-    g_application.Cleanup();
-    return status;
-  }
   if (!g_application.Initialize())
   {
     CMessagePrinter::DisplayError("ERROR: Unable to Initialize. Exiting");
